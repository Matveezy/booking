version: "3.9"
services:

  config:
    build:
      context: .
      args:
        service: config
    container_name: config
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8888:8888"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  eureka:
    build:
      context: .
      args:
        service: eureka
    container_name: eureka
    ports:
      - "8761:8761"
    depends_on:
      config:
        condition: service_healthy
    environment:
      - CONFIGSERVER_URI=http://config:8888
      - EUREKA_HOST=eureka
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  security:
    build:
      context: .
      args:
        service: security
    container_name: security
    depends_on:
      eureka:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      - CONFIGSERVER_URI=http://config:8888
      - EUREKA_HOST=eureka
      - HOST=db
      - PORT=${PG_PORT}
      - NAME=${POSTGRES_DB}
      - USER=${POSTGRES_USER}
      - PASS=${POSTGRES_PASSWORD}

  user:
    build:
      context: .
      args:
        service: user
    container_name: user
    depends_on:
      eureka:
        condition: service_healthy
      db:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      - CONFIGSERVER_URI=http://config:8888
      - EUREKA_HOST=eureka
      - HOST=db
      - PORT=${PG_PORT}
      - NAME=${POSTGRES_DB}
      - USER=${POSTGRES_USER}
      - PASS=${POSTGRES_PASSWORD}

  wallet:
    build:
      context: .
      args:
        service: wallet
    container_name: wallet
    depends_on:
      eureka:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      - CONFIGSERVER_URI=http://config:8888
      - EUREKA_HOST=eureka
      - HOST=db
      - PORT=${PG_PORT}
      - NAME=${POSTGRES_DB}
      - USER=${POSTGRES_USER}
      - PASS=${POSTGRES_PASSWORD}

  hotel:
    build:
      context: .
      args:
        service: hotel
    container_name: hotel
    depends_on:
      eureka:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      - CONFIGSERVER_URI=http://config:8888
      - EUREKA_HOST=eureka
      - HOST=db
      - PORT=${PG_PORT}
      - NAME=${POSTGRES_DB}
      - USER=${POSTGRES_USER}
      - PASS=${POSTGRES_PASSWORD}
      - KAFKA_HOST=${KAFKA_HOST}
      - KAFKA_PORT=${KAFKA_PORT}

  alerts:
    build:
      context: .
      args:
        service: alerts
    container_name: alerts
    depends_on:
      eureka:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      - CONFIGSERVER_URI=http://config:8888
      - EUREKA_HOST=eureka
      - MAIL_LOGIN=${MAIL_LOGIN}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - KAFKA_HOST=${KAFKA_HOST}
      - KAFKA_PORT=${KAFKA_PORT}

  files:
    build:
      context: .
      args:
        service: files
    container_name: files
    depends_on:
      eureka:
        condition: service_healthy
      mongo:
        condition: service_started
    environment:
      - CONFIGSERVER_URI=http://config:8888
      - EUREKA_HOST=eureka
      - HOST=mongo
      - PORT=${MONGO_PORT}
      - NAME=${MONGO_DB}
      - USER=${MONGO_USER}
      - PASS=${MONGO_PASS}

  gateway:
    build:
      context: .
      args:
        service: gateway
    container_name: gateway
    ports:
      - "8765:8765"
    depends_on:
      eureka:
        condition: service_healthy
    environment:
      - CONFIGSERVER_URI=http://config:8888
      - EUREKA_HOST=eureka

  db:
    image: postgres:14
    container_name: db
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=${PGDATA}
    volumes:
      - .:/var/lib/postgresql/data
    ports:
      - ${PG_PORT}:${PG_PORT}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB" ]
      interval: 5s
      timeout: 1s
      retries: 10
    restart: unless-stopped

  mongo:
    image: mongo
    container_name: mongo
    ports:
      - ${MONGO_PORT}:${MONGO_PORT}
    restart: always
    logging:
      options:
        max-size: 1g
    environment:
      - MONGO_INITDB_DATABASE=${MONGO_DB}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASS}
    volumes:
      - ./mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - ./mongodata:/data/db

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"

  kafka:
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    expose:
      - 29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-topics:
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic alerts --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --list
      "